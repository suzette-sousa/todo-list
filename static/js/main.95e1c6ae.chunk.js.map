{"version":3,"sources":["components/Tasks.js","components/Todos.js","components/functional/Header.js","components/AddToList.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Tasks","switchStyleFinished","textDecoration","props","list","finished","className","id","this","type","onChange","onComplete","bind","checked","htmlFor","style","title","onClick","delTask","React","Component","Todos","todos","map","Header","AddToList","state","onSubmit","e","preventDefault","addToList","setState","onAdd","target","value","name","placeholder","App","filter","newTodo","nanoid","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.95e1c6ae.chunk.js","sourcesContent":["import React from 'react';\n\nclass Tasks extends React.Component {\n  switchStyleFinished = () => {\n    return {\n      textDecoration: this.props.list.finished ? 'line-through' : false,\n    }\n  }\n  render() {\n    return (\n      <div className=\"checkbox-ctn\">\n        <input \n        id={`todo-${this.props.list.id}`} \n        className=\"checkbox\" \n        type=\"checkbox\" \n        onChange={this.props.onComplete.bind(this, this.props.list.id)} \n        checked={this.props.list.finished ? 'checked': false} />\n        <label \n        htmlFor={`todo-${this.props.list.id}`} \n        style={this.switchStyleFinished()} className=\"checkbox-label\">\n        {this.props.list.title}</label>\n        <button \n        onClick={this.props.delTask.bind(this, this.props.list.id)} \n        className=\"btn-delitem\"><span className=\"ico-close\"></span></button>\n      </div>\n    )\n  }\n}\n\nexport default Tasks;\n","import React from 'react';\nimport Tasks from './Tasks';\n\nclass Todos extends React.Component {\n  render() {\n    return this.props.todos.map((list) => (\n      <Tasks key={list.id} list={list} onComplete={this.props.onComplete} delTask={this.props.delTask} />\n    ))\n  }\n}\n\nexport default Todos;\n","import React from 'react';\n\nfunction Header() {\n  return (\n    <header className=\"header_title\">\n      <h1>Ma Todo List</h1>\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react';\n\nclass AddToList extends React.Component {\n  state= {\n    title: ''\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.addToList(this.state.title);\n    this.setState({\n      title: ''\n    });\n  }\n\n  onAdd = (e) => {\n    this.setState({\n      title: e.target.value\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <form onSubmit={this.onSubmit} className=\"form-group\">\n          <input\n          type=\"text\" \n          className=\"input-text\"\n          name=\"title\" \n          placeholder=\"Une autre tÃ¢che ?\" \n          value= {this.state.title}\n          onChange={this.onAdd} />\n          <input \n          type=\"submit\" \n          className=\"btn-submit\"\n          value=\"Ajouter\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddToList;\n","import React from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/functional/Header';\nimport AddToList from './components/AddToList';\nimport { nanoid } from \"nanoid\";\n\nclass App extends React.Component {\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: 'Task 1',\n        finished: false\n      },\n      {\n        id: 2,\n        title: 'Task 2',\n        finished: true\n      },\n      {\n        id: 3,\n        title: 'Task 3',\n        finished: false\n      },\n    ]\n  }\n\n  onComplete = (id) => {\n    this.setState ({\n      todos: this.state.todos.map(\n        list => {\n          if(list.id === id) {\n            list.finished = !list.finished;\n          }\n          return list;\n        }\n      )\n    })\n  }\n\n  delTask = (id) => {\n    this.setState ({\n      todos: [...this.state.todos.filter(\n        list => list.id !== id\n      )]\n    })\n  }\n\n  addToList = (title) => {\n    const newTodo = {\n      id: nanoid(),\n      title,\n      finished: false\n    }\n    this.setState ({\n      todos: [...this.state.todos, newTodo]\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Header />\n        <AddToList addToList={this.addToList} />\n        <Todos todos={this.state.todos} onComplete={this.onComplete} delTask={this.delTask} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.unregister();\n\nreportWebVitals();\n"],"sourceRoot":""}